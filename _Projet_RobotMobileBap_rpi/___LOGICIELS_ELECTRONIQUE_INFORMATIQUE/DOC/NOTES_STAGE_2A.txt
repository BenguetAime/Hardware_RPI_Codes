MON RASPBERRY: Username: pc, IP:10.192.4.38
cd ~/PBE/MonProjet2;  cd /etc; cd MonProjet2/ (depuis pbe)
cd ../ :Aller au repertoire de niveau sup; 

Vite: serveur qui execute node js

Protocol WebSocket (WS);

- MDP RPI kietta: Kietta8030


-HTML:<input type="text" onkeypress="myFunction()"> like scanf


-
https://www.tutorialsteacher.com/nodejs/nodejs-module-exports
Comme W3schools


#######################################  SOURCES   #######################################################
https://www.ip-systemes.com/details-comprendre+le+protocole+mqtt-795.html
##########################################################################################################


################ Reseau #############################################################################

#####################################################################################################





########################################################### Prise en main RPI #######################
WGS84, pm2,navigationMode
svg,


##################  REMOTE SSH ####################"";"";é;à;ù;è;!;*;
Depuis son PC:
Télécharger SSH,VOLAR (Vue Language Features),se connecter au rpi.
-VS CODE, Remote ssh et Pas remote Explorer, depuis VS CODE.

## cle
-Ajouter dans le fichier ssh du pi depuis remote explorer ssh, 
la Key se trouvant dans "id_rsa-pub" C:\Users\DOP1\.ssh. SI LE DOSSIER id_rsa.pub 
n'existe pas encore c'est qu'on doit le créer via un terminal sur notre pc:ssh-keygen -t rsa.
 SI LE DOSSIER "authorized_keys" n'existe pas sur RPI il faut le créer:

C:\Users\DOP1\.ssh (Cle pour ne plus entrer le mdp), ide_Rsa pub: pour prendre la cle
-si le pi refuse l'hote, aller dans ce fichier et supprimer le KNOWN HOST...
rgen pour generer la cle sur RPI dans le ./ssh/id_rsa.pub (ssh-keygen plutôt).
-Ensuite, vous pouvez copier le contenu de votre fichier "id_rsa.pub" provenant de votre PC 
et le coller dans le fichier "authorized_keys" sur le Raspberry Pi.

## npm,node js, VUE
-le processeur du RPI est ARM.
-sudo apt-get install npm et node js (oui)?(https://vuejs.org/guide/quick-start.html#creating-a-vue-application):
et démarrer l'installation de vue/node js.
-node -v et npm -v: s'ils ont été téléchargés et leur version.
-on a eu un pb, le logiciel a installé la version 12 de nodejs au lieu de 18. on est allé sur 
leur site prendre la commande utile (curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -          |sudo apt-get install -y nodejs:chat gpt)
-continuer (> npm init vue@latest :creer un vue...https://vuejs.org/guide/quick-start.html#creating-a-vue-application)
-installer VOLAR aussi sur rpi(en allant dans les fichier du projet vue créé: EX Helloworld, celui-ci est
en blanc et VS CODE propose d'ajouter l'extension qu'il faut)
- Et on a fait tout ceci dans un répetoire donné, pour projet VUE.
//////
Résumé: Ouvrez un terminal sur votre Raspberry Pi.
Tapez les commandes suivantes pour mettre à jour les dépôts de votre système :

>sudo apt-get update
>sudo apt-get upgrade
Téléchargez le script d'installation de Node.js en tapant la commande suivante :
>curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
Installez Node.js en tapant la commande suivante :
>sudo apt-get install -y nodejs
Cela devrait installer Node.js version 18.0.0 sur votre Raspberry Pi. Vous pouvez
vérifier la version en tapant la commande suivante :
>node -v
//////////

- Dans "package.json" compléter dev se trouvant dans "scripts": {
    "dev": "vite --host",
POUR POUVOIR OUVRIR NOTRE SITE WEB DE N'IMPORTE QUEL PC.
-> npm run dev:lancer le site web


---> Pour vous déconnecter en sécurité de votre Raspberry Pi depuis 
Visual Studio Code Remote:exit;Ouvrez le terminal dans Visual Studio Code.
Si vous êtes connecté en SSH à votre Raspberry Pi, tapez exit pour vous 
déconnecter de la session SSH.
Si vous avez des processus en cours d'exécution dans le terminal,
arrêtez-les en utilisant la commande Ctrl + C.
Tapez "sudo shutdown -h now" pour arrêter proprement votre Raspberry Pi.
Attendez que le Raspberry Pi s'arrête complètement.
Vous pouvez maintenant fermer la fenêtre du terminal dans Visual Studio Code.
#######
Notions de ports, vue js, primeview.
-Dans PBE, MonProjet -->jackson ajouter '--host' dans 'dev' apres Vite. POur pouvoir
ouvrir notre page de nimporte auel ordi.
-SUDO: super utilisateur, lorsqu'on télécharge sur raspberrypi.
- 192.168.1.12:rpi avec les composants du robot. 192.168.1.76:rpi pour nos tests de prise en main.


https://vuejs.org/guide/essentials/template-syntax.html#directives

################################################## PERSO VUE  ################################################
VUE JS:interpolation de texte




********************
-   En Vue.js, l'API d'option et l'API de composition sont deux approches différentes 
pour structurer et organiser les composants. Chacune a ses avantages et peut être
utilisée en fonction des besoins spécifiques du projet.
L'API d'option est l'approche classique de Vue.js. Elle consiste à définir les propriétés du composant dans un objet "options" :

-  L'API de composition est une nouvelle approche introduite dans Vue.js 3. Elle consiste à décomposer la logique du composant en petits morceaux réutilisables appelés "composables". Ces composables sont des fonctions qui peuvent être importées et utilisées dans les composants :
********************
<script>
export default {
  data() {
    return {
      imageUrl: "https://via.placeholder.com/150",
    };
  },
};
</script> explications



Ce code est un exemple de définition de données dans un composant Vue.
Le composant Vue a une méthode data qui doit renvoyer un objet contenant
 toutes les données que le composant doit gérer.
Dans cet exemple, data() retourne un objet avec une propriété imageUrl 
qui est initialisée à l'URL d'une image de 
placeholder. 
Lorsque le composant est créé, la méthode data() est appelée et renvoie 
l'objet contenant les données du
composant. Ces données peuvent être ensuite utilisées dans le template 
du composant en utilisant la syntaxe de template 
Vue, comme nous l'avons vu dans les exemples précédents.

Il est important de noter que les données définies dans data() sont réactives,
 ce qui signifie que si une de ces données
est modifiée, la vue sera mise à jour automatiquement pour refléter cette 
modification. C'est l'un des aspects les plus 
puissants de Vue, qui permet de créer des interfaces utilisateur dynamiques
 et réactives avec très peu de code.



********************
Les valeurs d'attribut de directive sont censées être des expressions 
JavaScript uniques (à l'exception de v-for, v-onet 
v-slot, qui seront abordés dans leurs sections respectives ultérieurement).
 Le travail d'une directive consiste à appliquer
 de manière réactive les mises à jour du DOM lorsque la valeur de son expression
 change. Prenons v-ifcomme exemple :


********************
La balise <div> dans Vue.js ne crée pas une instance Vue. C'est plutôt l'appel à
la fonction Vue.createApp() qui crée une 
instance Vue. La balise <div> dans votre exemple est simplement l'élément HTML qui
est associé à l'instance Vue créée.

Dans votre exemple, la section <script> définit une instance Vue avec des options 
de configuration telles que data et 
methods. L'instance Vue est créée en appelant la fonction Vue.createApp() et en lui
 passant un objet qui contient ces options
 de configuration.

La variable app est ensuite utilisée pour monter l'instance Vue sur l'élément DOM 
existant associé à cette instance, qui 
dans ce cas est la balise <div> avec l'id "app". Cette opération est effectuée en 
appelant la méthode .mount() de l'instance 
Vue, comme suit : app.mount('#app').

********************
<script setup>
defineProps({
  msg: {
    type: String,
    required: true
  }
})
</script>


Cette partie de code est une balise <script> 
avec l'attribut setup qui définit la configuration 
initiale d'un composant Vue
 3. La balise <script> est utilisée pour écrire du 
code JavaScript dans un fichier Vue.


*********************
npm run dev: pour lancer mon appli VUE JS en ligne de commande.
https://vuejs.org/guide/quick-start.html#creating-a-vue-application
*********************







*********************
<a href="https://vitejs.dev/" target="_blank rel="noopener">Vite</a> :
target="_blank--->pour afficher le lien sur une autre fenêtre,

-	La balise <span> est utilisée pour afficher le contenu de la propriété msg dans un élément de l'interface utilisateur.




#############################################  PERSO Java Script  #########################################################
https://www.w3schools.com/js/js_whereto.asp

-   @media est une règle CSS qui permet de définir les styles pour différents types d'appareils ou de tailles d'écran. Elle est utilisée pour les requêtes multimédias et permet de spécifier des styles différents pour des résolutions différentes.

-   La principale différence entre les balises <span> et <p>
 avec la propriété CSS color: red est leur comportement par défaut.

La balise <p> est une balise de bloc, ce qui signifie qu'elle crée 
un bloc de texte distinct et prend tout l'espace horizontal disponible
 dans son conteneur parent. Par conséquent, si vous utilisez <p style="color: red">
This should be red.</p>, le texte sera de couleur rouge et prendra toute la largeur disponible.

La balise <span>, en revanche, est une balise en ligne qui ne crée pas de bloc 
de texte distinct et ne prend que l'espace nécessaire pour afficher son 
contenu. Par conséquent, si vous utilisez <span style="color: red">This 
should be red.</span>, le texte sera également de couleur rouge, mais il
 ne prendra que la largeur nécessaire pour afficher le contenu.

-  To add several EXTERNAL script files to one page  - use several script tags:
Example
<script src="myScript1.js"></scripst>
<script src="myScript2.js"></script>

-  An external script can be referenced in 3 different ways:

With a full URL (a full web address)
With a file path (like /js/)
Without any path
This example uses a full URL to link to myScript.js:

Example
<script src="https://www.w3schools.com/js/myScript.js"></script


-  JavaScript can "display" data in different ways:

Writing into an HTML element, using innerHTML.
...Writing into the HTML output using document.write():La méthode 
document.write() est utilisée
pour écrire du contenu directement dans le document HTML. Cette 
méthode peut être utilisée 
pour ajouter du contenu dynamiquement à une page web, mais elle 
doit être utilisée avec prudence 
car elle peut remplacer tout le contenu de la page si elle est
 appelée après que la page a été 
entièrement chargée.
Writing into an alert box, using window.alert().
...Writing into the browser console, using console.log(): For 
debugging purposes, you can call the console.log()
...<button onclick="window.print()">Print this page</button> 
:pour imprimer


-   F12 on your keyboard will activate debugging.
Then select "Console" in the debugger menu.
Then click Run again: sur w3school


-  ------------------------------------ -----------  VARIABLE ETC
...4 Ways to Declare a JavaScript Variable:
Using var
Using let
Using const
Using nothing
...A variable declared without a value will have the value 'undefined'
...With let you can not do this:
let x = "John Doe";
let x = 0;
but you can: let x=10;// Now x is undefined
x = 5;// Now x is a Number
x = "John2";// Now x is a String
...With var you can:
var x = "John Doe";
var x = 0;
..."const" variables must be assigned a value IIMEDIATELY when they are declared
with CONST
you can NOT:

Reassign a constant value
Reassign a constant array
Reassign a constant object
But you CAN:

Change the elements of constant array
Change the properties of constant object


...Semicolons separate JavaScript statements.
Add a semicolon at the end of each executable statement:
Examples
let a, b, c;  // Declare 3 variables
a = 5;        // Assign the value 5 to a
b = 6;        // Assign the value 6 to b
c = a + b;    // Assign the sum of a and b to c

...La différence entre 'let' et 'var' est que 'let' est limité à 
la portée du bloc dans lequel il est déclaré, tandis que 'var' a 
une portée de fonction ou de portée globale. Cela signifie que si 
vous déclarez une variable avec 'let' dans une fonction ou un bloc,
 elle ne sera pas accessible en dehors de ce bloc.
...Variables defined with const have Block Scope

...JavaScript is Case Sensitive (html, css too?)
...Hyphens are not allowed in JavaScript. They are reserved for subtractions.
...La notation Pascal est une convention de nommage pour les identificateurs
 de variables, de fonctions, de constantes et d'autres éléments de code utilisés 
dans le langage de programmation Pascal. Elle utilise la casse de lettres, en 
utilisant des majuscules pour le début de chaque mot dans un identificateur composé
 de plusieurs mots. Par exemple, "MaVariableEntiere" est un identificateur en 
PascalCase : Upper Camel Case (BenPad).
...Lower Camel Case:mOnnDoit.

------------------------------------------ 
A JavaScript function is executed when "something" invokes it (calls it):
function myFunction(p1, p2) {
  return p1 * p2;
}

---------------------------------------------------------
x ** y produces the same result as Math.pow(x, y)

...JavaScript has 8 Datatypes
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

The Object Datatype
The object data type can contain:

1. An object
2. An array
3. A date

...A method is a function stored as a property.
...In JavaScript, the this keyword refers to an object.
...In an event, this refers to the element that received the event.
...person.fullName(): pour ACCEDER A UNE METHODE D UN OBJET, ne pas oublier la prenthese TJR.
When a JavaScript variable is declared with the keyword "new", the variable is created as an object:

x = new String();        // Declares x as a String object
y = new Number();        // Declares y as a Number object
z = new Boolean();       // Declares z as a Boolean object
...<button onclick="this.innerHTML=Date()">The time is?</button>

----------------- HTML EVENTS :https://www.w3schools.com/js/js_events.asp

------------------Converting a JSON Text to a JavaScript Object
A common use of JSON is to read data from a web server, and display the data in a web page.

For simplicity, this can be demonstrated using a string as input.

First, create a JavaScript string containing JSON syntax:

let text = '{ "employees" : [' +
'{ "firstName":"John" , "lastName":"Doe" },' +
'{ "firstName":"Anna" , "lastName":"Smith" },' +
'{ "firstName":"Peter" , "lastName":"Jones" } ]}';
Then, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:

const obj = JSON.parse(text); JSON stands for JavaScript Object Notation

JSON is a text format for storing and transporting data
..........JavaScript also has a built in function for converting an object into a JSON string:
JSON.stringify()



*****
The HTML <form> element can contain one or more of the following form elements:

<input>
<label>
<select>
<textarea>
<button>
<fieldset>
<legend>
<datalist>
<output>
<option>
<optgroup>



#####################################################   NODE JS   ##################################################
-	Node.js est un environnement d'exécution côté serveur open source
 construit sur le moteur JavaScript V8 de Google Chrome. Il permet l'exécution
 de code JavaScript côté serveur, permettant ainsi de créer des applications
web côté serveur. Node.js est particulièrement adapté pour les applications qui
 ont une forte demande en temps réel, car il utilise un modèle de programmation
 asynchrone événementiel non bloquant pour la gestion des entrées/sorties. Cela 
signifie que les applications Node.js sont capables de traiter un grand nombre 
de connexions simultanées avec une latence minimale, ce qui les rend idéales 
pour les applications de chat en temps réel, les jeux en ligne, les applications 
de diffusion en continu, etc.

-	La principale différence entre l'exécution côté client et l'exécution côté serveur
 est l'endroit où le code est exécuté.

L'exécution côté client se produit sur l'ordinateur de l'utilisateur final, dans son 
navigateur web. Le code est téléchargé depuis un serveur distant et exécuté localement
 sur la machine de l'utilisateur. Ce qui signifie que l'utilisateur peut interagir avec 
l'application sans avoir besoin d'une connexion réseau constante avec le serveur distant. 
Les langages de programmation utilisés pour l'exécution côté client sont principalement 
le HTML, le CSS et le JavaScript.

En revanche, l'exécution côté serveur se produit sur un ordinateur distant, également connu
 sous le nom de serveur. Le code est exécuté sur le serveur et le résultat est renvoyé à 
l'utilisateur final sous forme de page web. Les langages de programmation utilisés pour 
l'exécution côté serveur incluent Node.js, PHP, Ruby, Python, etc.

L'exécution côté serveur est utilisée pour gérer des tâches qui ne peuvent pas être effectuées
 côté client, comme la gestion de bases de données, l'authentification d'utilisateurs et la
 gestion de fichiers. L'exécution côté serveur peut également être utilisée pour générer du 
contenu dynamique qui est ensuite envoyé au client pour être affiché.

En résumé, l'exécution côté client se produit sur la machine de l'utilisateur final, tandis 
que l'exécution côté serveur se produit sur un ordinateur distant, également connu sous le 
nom de serveur. Les deux méthodes ont des cas d'utilisation distincts et sont souvent utilisées
 en tandem pour fournir une expérience utilisateur optimale.


-	Initiate ".js" AVANT D"executer:
C:\Users\Your Name>node myfirst.js
-	Pour exécuter le fichier, tapez la commande node monfichier.js dans
 la ligne de commande ou le terminal et appuyez sur Entrée.
Node.js exécutera votre code et affichera les résultats dans la console.

-	Lorsque vous vous connectez à un serveur, le serveur doit écouter 
sur un port spécifique pour recevoir des connexions de clients. Le port est 
un numéro entier qui identifie une application réseau spécifique sur un serveur.

-	CAS PARTICULIER:
var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(req.url);
  res.end();
}).listen(8080);


QUERY STRING. Une fois que le serveur Node.js reçoit 
une requête HTTP avec une query string, il peut extraire les données de la 
query string en analysant l'URL de la requête. Cela peut être fait en utilisant
 le module URL intégré de Node.js pour analyser l'URL, puis en utilisant le module
 Query String pour extraire les données de la query string.

Une fois que les données de la query string ont été extraites, le serveur peut les
 utiliser pour effectuer des opérations appropriées. Par exemple, si les données de
 la query string contiennent des paramètres de recherche pour une recherche de base
 de données, le serveur peut utiliser ces paramètres pour interroger la base de 
données et renvoyer les résultats correspondants.


-	Node.js File Server: EX-http://localhost:8080/summer.html
var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    } 
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);


--------------------	A package in Node.js contains all the files you need for a module.
Modules are JavaScript libraries you can include in your project.







############################################################################    PRIMEVUE     ##########################################################
PRIME FLEX: 12 colonnes pour ecrire avec des div.
-	Pour utiliser un bouton avec PrimeVue dans un projet Vue.js, il faut suivre les étapes suivantes :

Installer PrimeVue en utilisant npm :
****npm install primevue

Importer le bouton dans le composant Vue.js :
****import Button from 'primevue/button';

Enregistrer le bouton comme composant :
****Vue.component('Button', Button);

Utiliser le bouton dans le template du composant :

*****
Dans Vue.js, la directive v-model est utilisée pour créer une liaison bidirectionnelle entre les données de l'application et les éléments de formulaire tels que les champs de saisie, les cases à cocher, les boutons radio, etc. Elle permet de synchroniser automatiquement les valeurs des éléments de formulaire avec les données de l'application.





#########################################################      MQTT    ###########################################################
npm install mqtt;

/// pour utiliser la commande ;mosquito_pub en ldc et pouvoir tester
sudo apt-get update
sudo apt-get install mosquitto-clients

///
La connexion m'a ete refusée :Nous avons lancer des commande sur la ligne de comnde windows, pour modifier le fichier de config de mqtt pour pouvoir acceder au BROKER de message mqtt de n'importe quel ordi...sudo nano /etc/mosquitto/mosquitto.conf    (Dans le fichier: écrire: allow_anonymous true PUIS SAUTER LA LIGNE listener 1883) puis en ldcmd:sudo service mosquitto restart
!!!!!!!!!!!!!!!!!  SI PB DE CONNECTION WEBSOCKET: https://github.com/eclipse/mosquitto/issues/2425 aJOUTER LES 2 LIGNES 
protocol websockets
socket_domain ipv4



(Pour tester un publish: mosquitto_pub -h 192.168.1.76 -p 1883 -t "maison/salon/temperature" -m "22°C")
(Juste avant: sudo apt-get update
sudo apt-get install mosquitto-clients)
Voir capture d'écran...

///Installer mqtt explorer: visualiser et publish des données.
///Se mettre en retain?pour obtenir les données sauvegardées...





//	//	//	//	//	//	//	//	//	//	//	///
Le client: PC, Le server: RPI
//
il faut telecharger mqtt cote browser (sur le pc:download par ex), ensuite en ligne de commande windows (se mettre): il faut copier mqtt.min.js sur le RPI:https://www.npmjs.com/package/mqtt#browser, click droit sur:https://unpkg.com/mqtt/dist/mqtt.min.js Puis 'ouvrir sur un nouvel onglet', Puis trouver un moyen d'enregistrer. Puis copié le fichier sur le RPI:  C:\Users\pc>scp mqtt.min.js pc@10.192.4.38:/home/pc/TestVue/MonProjetMqtt/
 ; C:\Users\pc>scp mqtt.min.js pi@192.168.1.76:/home/pi/PBE/MonProjetMqtt/: rpi kietta

Le mettre apres dans la RPI (dossier 'Public'), ajouter une ligne:'<script type="module"?? text=javascript src="/mqtt.min.js"></script>' dans le fichier 'index.html' du projet Vue js.

//Dans Vue.js(côté client) om se connecte non plus en MQTT mais en WS:
const mqttClient = mqtt.connect('ws://192.168.1.76');

// REQUIRE (file): aussi non defined car le fichier ne dois pas être écrit depuis le browser(client), mais depuis le server:
il faut creer un fichier un fichier 'node js' pour cela, et un fichier VUE pour l'app qui permet de tester la modification du fichier JSON de test.


#######
Définissez la route '/modifier-json' en utilisant la méthode post de l'instance d'application :

Dans cet exemple, nous utilisons app.post('/modifier-json', ...) pour définir la route /modifier-json comme une route POST.

Pour effectuer la requête POST vers la route '/modifier-json' depuis votre application Vue.js en utilisant la bibliothèque Axios, 
//
Les requêtes POST (POST requests) sont l'un des types de requêtes HTTP utilisées pour envoyer des données vers un serveur. Contrairement aux requêtes GET qui sont principalement utilisées pour récupérer des données, les requêtes POST permettent d'envoyer des données au serveur pour effectuer une action ou une modification.

//

Le code que vous avez fourni crée une instance d'Axios avec une configuration spécifique. L'instance Axios créée utilisera http://localhost:8080 comme URL de base pour toutes les requêtes effectuées à partir de cette instance.
//
Dans votre cas, l'instance Axios est configurée avec une URL de base http://localhost:8080. Vous devez vous assurer que cette URL correspond à l'URL de votre backend Node.js où vous avez exposé la route '/modifier-json'. Si votre backend s'exécute sur le même appareil que votre application Vue.js, l'URL http://localhost:8080 devrait être correcte. Cependant, si votre backend s'exécute sur un autre appareil ou utilise un port différent, vous devrez modifier l'URL de base en conséquence.

//
Dans votre cas, l'instance Axios est configurée avec une URL de base http://localhost:8080. 
Vous devez vous assurer que cette URL correspond à l'URL de votre backend Node.js où vous avez exposé la route '/modifier-json'. Si votre backend s'exécute sur le même appareil que votre application Vue.js, l'URL http://localhost:8080 devrait être correcte. Cependant, si votre backend s'exécute sur un autre appareil ou utilise un port différent, vous devrez modifier l'URL de base en conséquence.




§
##################  12/05
j'ai installé npm sous /PBE, Mon code Node Js y etant. 

SVELT

https://www.npmjs.com/package/vanilla-jsoneditor: POUR AFFICHER LE JSON EDITOR SUR L'APPLI

STORES

pm2

Vanilla-jsoneditor;version svelt


//////
Je m'excuse pour la confusion. En effet, le code const fs = require('fs'); est utilisé pour importer le module fs dans Node.js, mais il n'est pas pris en charge directement dans le navigateur lors de l'exécution d'une application Vue.js.

Si vous souhaitez manipuler des fichiers dans le navigateur avec une application Vue.js, vous devrez utiliser des mécanismes fournis par le navigateur lui-même, tels que l'API File pour lire les fichiers sélectionnés par l'utilisateur ou l'API Fetch pour effectuer des requêtes de fichiers auprès d'un serveur.

https://jsoneditoronline.org/


////////////  
Modeif de l'app pour qu'elle fonctionne.
const client = mqtt.connect('ws://192.168.1.76:8083/');
const client = mqtt.connect('mqtt://192.168.1.76:1883/'); TJR
modif du fichier index.html: <script type="text/javascript" src="/mqtt.min.js"></script>

Ne plus import jsoneditor from 'jsoneditor' si on a fait0...dans index.html


//// j'ai modifier le code avec: onmounted, voir fichier Public etindex.htlm relatif a jsonoedtor










#############################    15/05/2023

###
Vanilla: pour pouvoir utiliser un outils qui ne peut être lancé sur un navigateur. On utilise un outil permettant de construire le built.
###

Dans MQTT Explorer, l'option "Retain" (ou "Retained" en anglais) fait référence à la fonctionnalité "Retained Messages" du protocole MQTT.

Lorsqu'un message MQTT est publié avec l'option Retain activée, le courtier MQTT le conserve en mémoire et le transmettra automatiquement à tout client qui se connecte et s'abonne au même sujet (topic). Cela permet à un client de recevoir instantanément le dernier message publié sur un sujet spécifique, même s'il n'était pas actif au moment de la publication.

L'utilisation de messages rétention (retained messages) peut être utile dans certaines situations, par exemple pour fournir un état initial ou des informations de configuration à un client lorsqu'il se connecte. Cependant, il est important de noter que les messages rétention ne sont pas conçus pour être utilisés comme un historique complet des messages, car ils sont généralement remplacés par les messages les plus récents.

Dans MQTT Explorer, l'option "Retain" vous permet de spécifier si un message que vous publiez doit être conservé en tant que message rétention. En cochant cette option, le message sera retenu par le courtier MQTT et sera transmis aux clients qui s'abonnent à ce sujet.

#######










#################################################################################### AIS




######################### 06/06/2023
-
Références réactives (ref) :
Les références réactives sont utilisées pour stocker des valeurs réactives dans vos composants. Elles permettent de créer une liaison entre la valeur et le composant, de sorte que toute modification de la valeur se reflète automatiquement dans le rendu du composant. 

-
Propriétés calculées (computed) :
Les propriétés calculées sont utilisées pour effectuer des calculs dynamiques basés sur d'autres valeurs réactives. Elles permettent de définir une dépendance sur des références réactives, de sorte que la propriété calculée est recalculée automatiquement lorsque ces références changent
EX: import { ref, computed } from 'vue';

const firstName = ref('John');
const lastName = ref('Doe');

// Définition d'une propriété calculée
const fullName = computed(() => {
  return `${firstName.value} ${lastName.value}`;
});


